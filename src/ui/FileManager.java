package ui;import java.io.BufferedReader;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.Vector;import util.Constantes;import util.GZIP;import util.Util;import android.os.Environment;import android.util.Log;public class FileManager {	private static FileManager instancia;	private InputStream inputStreamArquivo;	private static BufferedReader inputBuffer;	private static FileInputStream fInputStream;	private static File fileSelected;	private String pathDiretorioRotas;	private final static byte ENTER = 13;	private final static byte LINE = 10;	private final static byte EOF = -1;	private static int indiceArquivoImoveis;	public static final int NAO_CRIAR = 1;	public static String INPUT_FILE_PATH;	public static final int CRIAR_SE_NAO_EXISTIR = 0;	public static final int APAGAR_E_CRIAR = 2;	public static final int APAGAR = 3;	private static final String RESOURCE_PATH = "/";	private static final int NUMERO_LINHAS_LEITURA = 0;	private FileManager() {		try {			descobrirRootsDispositivo();		} catch (SecurityException se) {		}	}	public static FileManager getInstancia() {		if (instancia == null) {			instancia = new FileManager();		}		return instancia;	}	public static int getFileLineNumber(String fileName) throws IOException {		int numeroLinhas = Constantes.NULO_INT;		String line = "";		inputBuffer = null;		fileSelected = new File(Util.getExternalStorageDirectory(), Constantes.DIRETORIO_ROTAS + "/" + fileName);		if (fileSelected.canRead()) {			try {				fInputStream = new FileInputStream(fileSelected);				int tamanho = (int) fileSelected.length();				byte[] firstLine = new byte[100];				ByteArrayOutputStream baos = new ByteArrayOutputStream();				int nrb = fInputStream.read(firstLine, 0, 100);				baos.write(firstLine, 0, nrb);				firstLine = baos.toByteArray();				ByteArrayInputStream byteArray = new ByteArrayInputStream(firstLine);				InputStreamReader iSReader = new InputStreamReader(byteArray, "ISO-8859-1");				inputBuffer = new BufferedReader(iSReader);				if ((line = inputBuffer.readLine()) != null) {					numeroLinhas = Integer.parseInt(line);				}				fInputStream.close();			} catch (IOException e) {				e.printStackTrace();			}		}		return numeroLinhas;	}	public static BufferedReader readFile(String fileName) {		inputBuffer = null;		fileSelected = new File(Util.getExternalStorageDirectory(), Constantes.DIRETORIO_ROTAS + "/" + fileName);		if (fileSelected.canRead()) {			try {				fInputStream = new FileInputStream(fileSelected);				InputStreamReader iSReader = new InputStreamReader(fInputStream, "ISO-8859-1");				inputBuffer = new BufferedReader(iSReader);			} catch (IOException e) {				e.printStackTrace();			}		}		return inputBuffer;	}	public static BufferedReader readCompressedFile(String fileName) {		inputBuffer = null;		fileSelected = new File(Util.getExternalStorageDirectory(), Constantes.DIRETORIO_ROTAS + "/" + fileName);		if (fileSelected.canRead()) {			try {				fInputStream = new FileInputStream(fileSelected);				byte[] arrayArquivoCompactado = new byte[(int) fileSelected.length()];				ByteArrayOutputStream baos = new ByteArrayOutputStream();				int nrb = fInputStream.read(arrayArquivoCompactado, 0, (int) fileSelected.length());				while (nrb != -1) {					baos.write(arrayArquivoCompactado, 0, nrb);					nrb = fInputStream.read(arrayArquivoCompactado, 0, (int) fileSelected.length());				}				arrayArquivoCompactado = baos.toByteArray();				arrayArquivoCompactado = GZIP.inflate(arrayArquivoCompactado);				ByteArrayInputStream byteArray = new ByteArrayInputStream(arrayArquivoCompactado);				InputStreamReader iSReader = new InputStreamReader(byteArray, "ISO-8859-1");				inputBuffer = new BufferedReader(iSReader);			} catch (IOException e) {				e.printStackTrace();			}		}		return inputBuffer;	}	public Vector carregaVetorLinhas(InputStream arquivo, int maxLinhas) throws IOException {		Vector vetor = new Vector();		vetor.removeAllElements();		StringBuffer buffer = new StringBuffer();		int i = 0;		while (i != EOF && (maxLinhas == 0 || vetor.size() < maxLinhas)) {			i = arquivo.read();			String line = buffer.toString();			if (i == ENTER) {				i = arquivo.read();			}			if (i == LINE || i == EOF) {				if ("".equals(line) || line == null || line.length() == 0) {					continue;				}				vetor.addElement(line);				buffer.delete(0, buffer.length());			} else {				buffer.append((char) i);			}		}		indiceArquivoImoveis += maxLinhas;		buffer = null;		return vetor;	}	public Vector lerArquivoImoveis(InputStream arquivo) throws IOException {		inputStreamArquivo = arquivo;		boolean response = (inputStreamArquivo != null);		Vector linhas = null;		if (response) {			linhas = carregaVetorLinhas(inputStreamArquivo, NUMERO_LINHAS_LEITURA);			if (inputStreamArquivo != null && linhas.size() == 0) {				inputStreamArquivo.close();				inputStreamArquivo = null;			}		}		return linhas;	}	public void descobrirRootsDispositivo() throws SecurityException {		String state = Environment.getExternalStorageState();		if (Environment.MEDIA_MOUNTED.equals(state)) {			File path = Util.getExternalStorageDirectory();			path.getAbsolutePath();			Log.i("ExternalStorage", "ExternalStorage :" + path.getAbsolutePath());			pathDiretorioRotas = path.getAbsolutePath() + Constantes.DIRETORIO_ROTAS;		} else {			pathDiretorioRotas = null;		}	}	public static boolean verificarExistenciaArquivo(String nomeArquivo) {		boolean result = false;		return result;	}}